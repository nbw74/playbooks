---
- name: "{{ domain.1.name }}: get block devices"
  shell: >
    virsh -q domblklist {{ domain.1.name|quote }} | awk '$1 ~ "[sv]d[a-z]" { print $2 }'
  register: reg_blklist
  delegate_to: "{{ domain.0.src }}"
  changed_when: false

- name: "{{ domain.1.name }}: fail if unable get block device"
  fail:
    msg: "UNABLE GET BLOCK DEVICE PATH FOR DOMAIN '{{ domain.1.name }}'"
  when: reg_blklist.stdout_lines|length == 0

- name: "{{ domain.1.name }}: set fact (boot_dev list)"
  set_fact:
    boot_dev: "{{ reg_blklist.stdout_lines }}"

- name: "{{ domain.1.name }}: fail if bad disks count"
  fail:
    msg: "LUKS USED AND DOMAIN {{ domain.1.name|quote }} DISKS COUNT ({{ reg_blk_count.stdout }}) IS NOT 1"
  when:
    - boot_dev|length > 1
    - domain.1.lv is defined

- name: "{{ domain.1.name }}: set fact (lvol_dev list I)"
  set_fact:
    lvol_dev: "{{ boot_dev }}"
  when: domain.1.lv is not defined

- name: "{{ domain.1.name }}: set fact (lvol_dev list II)"
  set_fact:
    lvol_dev: "[ '{{ domain.1.lv }}' ]"
  when: domain.1.lv is defined

- name: "{{ domain.1.name }}: get trim support on dest"
  shell: >
    lsblk -do NAME,DISC-GRAN
    | awk '/sd[a-z]|nvme/ { if($2 != "0B") flag=1 } END { if(flag) print "True"; else print "False" }'
  register: reg_trim_dest
  delegate_to: "{{ domain.0.dest }}"
  become: yes
  changed_when: false

- name: "{{ domain.1.name }}: set fact (trim_dest)"
  set_fact:
    trim_dest: "{{ reg_trim_dest.stdout|bool }}"

- debug:
    msg:
      - "trim_dest: {{ trim_dest }}"

- name: Block for plain VM
  block:
    - name: "{{ domain.1.name }}: domain running"
      virt:
        name: "{{ domain.1.name }}"
        state: running
      register: reg_dom_run
      delegate_to: "{{ domain.0.src }}"

    - name: "{{ domain.1.name }}: waiting for qemu-agent become reachable"
      shell: >
        virsh -q qemu-agent-command {{ domain.1.name|quote }} --timeout 2 '{ "execute": "guest-sync", "arguments": { "id": 123456 } }'
      register: reg_ga_sync
      until: reg_ga_sync.stdout.find('123456') != -1
      retries: 20
      delay: 5
      delegate_to: "{{ domain.0.src }}"
      changed_when: false

    - name: "{{ domain.1.name }}: set health check ipv4 if defined in config"
      set_fact:
        health_ipaddr: "{{ domain.1.ip|ipv4('address')|d('noaddress') }}"
      when: domain.ip is defined

    - name: "{{ domain.1.name }}: get ip addresses"
      shell: >
        virsh -q domifaddr {{ domain.1.name|quote }} --source agent | awk '$3 == "ipv4" { print $4 }'
      register: reg_ifaddr
      when: domain.1.ip is not defined
      delegate_to: "{{ domain.0.src }}"
      until: reg_ifaddr.stdout_lines|length > 1
      retries: 10
      delay: 5
      changed_when: false

    - debug:
        msg:
          - "reg_ifaddr.stdout_lines: {{ reg_ifaddr.stdout_lines }}"
      when: domain.1.ip is not defined

    - name: "{{ domain.1.name }}: set health check ipv4 (if private)"
      set_fact:
        health_ipaddr: "{{ reg_ifaddr.stdout_lines | ipv4('private') | first | d('noaddress') }}"
      when:
        - domain.1.ip is not defined
        - reg_ifaddr.stdout_lines|length > 0

    - name: "{{ domain.1.name }}: set health check ipv4 (if public only)"
      set_fact:
        health_ipaddr: "{{ reg_ifaddr.stdout_lines | ipv4('public') | first | d('noaddress') }}"
      when:
        - health_ipaddr|d('noaddress') == 'noaddress'
        - domain.1.ip is not defined
        - reg_ifaddr.stdout_lines|length > 0

    - name: "{{ domain.1.name }}: set health check ipv4 if defined apparently"
      set_fact:
        health_ipaddr: "{{ domain.1.ip }}"
      when: domain.1.ip is defined

    - name: "{{ domain.1.name }}: fail if health check ipv4 still not defined"
      fail:
        msg: "CANNOT GET IPv4 FOR HEALTH CHECK, PLEASE DEFINE IT MANUALLY"
      when: health_ipaddr|d('noaddress') == 'noaddress'

    - name: "{{ domain.1.name }}: ping health check ipv4"
      command: >
        ping -i0.2 -W1 -c3 {{ health_ipaddr|ipv4('address')|quote }}
      changed_when: false
      register: reg_ping_init
      until: not reg_ping_init.failed
      retries: 5
      delay: 5

  when: domain.1.lv is not defined
...
