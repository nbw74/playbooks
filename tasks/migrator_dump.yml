---
- name: "{{ domain.1.name }}: get lv sizes"
  command: >
    lvs --noheadings --quiet --units b -o lv_size {{ item|quote }}
  register: reg_lv_size
  delegate_to: "{{ domain.0.src }}"
  become: true
  changed_when: false
  with_items: "{{ lvol_dev }}"

- name: "{{ domain.1.name }}: set lv sizes (dict)"
  set_fact:
    lvol_size: "{{ lvol_size|d({})|combine( {item.item: item.stdout|trim} ) }}"
  with_items: "{{ reg_lv_size.results }}"
  loop_control:
    label: "{{ item.item }}:{{ item.stdout }}"

- name: "{{ domain.1.name }}: check if dest lv already exists"
  stat:
    path: "/dev/{{ domain.0.vg }}/{{ item|basename }}"
  delegate_to: "{{ domain.0.dest }}"
  become: true
  register: reg_lv_stat
  with_items: "{{ lvol_dev }}"

- name: "{{ domain.1.name }}: fail if dest lv already exists"
  fail:
    msg: "LOGICAL VOLUME '/dev/{{ domain.0.vg }}/{{ item.item|basename }}' ALREADY EXISTS"
  when: item.stat.exists
  with_items: "{{ reg_lv_stat.results }}"
  loop_control:
    label: "{{ item.item|basename }}:{{ item.stat.exists }}"

- name: ansible_local fact
  set_fact:
    ansible_local: []
  when: ansible_local is not defined

- name: "{{ domain.1.name }}: create lv"
  lvol:
    lv: "{{ item.key|basename }}"
    size: "{{ item.value }}"
    vg: "{{ domain.0.vg }}"
    opts: "{{ (ansible_local.common|default(dict(lvol_opts='')))['lvol_opts']|d('') }}"
  delegate_to: "{{ domain.0.dest }}"
  delegate_facts: true
  become: true
  with_dict: "{{ lvol_size }}"
  loop_control:
    label: "/dev/{{ domain.0.vg }}/{{ item.key|basename }}"

- name: "{{ domain.1.name }}: include transmit tasks"
  include_tasks: migrator_transmit.yml
  with_items: "{{ lvol_dev }}"
  loop_control:
    loop_var: lv

...
